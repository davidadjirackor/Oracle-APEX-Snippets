{
	"APEX User reset/unlock": {
		"scope": "PL/SQL",
		"prefix": ["reset","pwd","unlock","user","APEX"],
		 "body": [
			 "declare",
			"  l_workspace varchar2(30 char) := '${1:workspace}';",
			"  l_username  varchar2(30 char) := '${2:username}';",
			"begin",
			"  apex_util.set_workspace ( p_workspace => l_workspace );",
			"  apex_util.reset_password (",
			"        p_user_name     => l_username,", 
			"        p_old_password  => null,",
			"        p_new_password  => '${3:password}',",
			"        p_change_password_on_first_use => false);",
			"  apex_util.unlock_account ( p_user_name  => l_username);",
			"end;",
			"/"
		 ],
		 "description": "Reset APEX user"
	},
	"APEX set security group": {
		"scope": "PL/SQL",
		"prefix": ["security","group","APEX"],
		 "body": [
			 "begin",
			 "	for c1 in (",
			 "		select workspace_id",
			 "		  from apex_applications",
			 "	     where application_id = ${1:100} )",
			 "	loop",
			 "		apex_util.set_security_group_id(p_security_group_id => c1.workspace_id);",
			 "	end loop;",
		 	 "end;",
		     "/"],
		 "description": "Set security group for application ID"
	},		
	"APEX send mail": {
		"scope": "PL/SQL",
		"prefix": ["send","mail", "APEX"],
		 "body": [
			"declare",
			"	l_id NUMBER;",
			"",
			"	l_to    varchar2(100 char) := '${1:mail_to}';",
			"	l_from  varchar2(100 char) := '${2:mail_from}';",
		 	"begin",
			"	l_id := apex_mail.send(",
			"		p_to        => l_to,",
			"		p_from      => l_from,",
			"		p_subj      => 'TEST',",
			"		p_body      => 'Send from app',",
			"		p_body_html => 'Send from app');",
		 	"/*",
			"	for c1 in (select filename, blob_content, mime_type",
			"				 from apex_application_files",
			"				where id in (123,456))",
			"	loop",
			"",
			"		apex_mail.add_attachment("
			"			p_mail_id    => l_id,",
			"			p_attachment => c1.blob_content,",
			"			p_filename   => c1.filename,",
			"			p_mime_type  => c1.mime_type);",
			"	end loop;",
			"",	 
			"*/",
			"	commit;",
			"	apex_mail.push_queue;",
		 	 "end;",
		     "/"],
		 "description": "Send test mail with APEX_MAIL api"
	},	
	"APEX views": {
		"scope": "PL/SQL",
		"prefix": ["views","disctionary", "APEX"],
		 "body": [
			"select distinct apex_view_name",
			"  from apex_dictionary", 
		    "--  where apex_view_name like '%DEBUG%'",
			";"
		   ],
		 "description": "Find APEX view"
	},	
	"APEX kill session": {
		"scope": "PL/SQL",
		"prefix": ["session","kill","APEX"],
		 "body": [
			"DEFINE df_p_app_workspace = '${1:workspace}';",
			"",
			"",
			"/* Query sessions */",
			"	select * from apex_workspace_sessions where workspace_name = '&&df_p_app_workspace';",
			"",
			"/* Kill all sessions on workspace",
			"	declare",
			"		l_workspace varchar2(30 char) := '&&df_p_app_workspace';",
			"	begin",
			"		apex_util.set_workspace (",
			"			p_workspace => l_workspace );",
			"",					
			"		for i in (select * from apex_workspace_sessions where workspace_name = l_workspace)",
			"		loop",
			"			apex_session.delete_session (p_session_id => i.apex_session_id );",
			"		end loop;",
			"		commit;",
			"	end;",
			"	/"
			"*/",
			"",
			"" ,
			"/* Kill single session",
			"	declare",
			"		l_workspace varchar2(30 char) := '&&df_p_app_workspace';",
		"			l_session   number := ${2:0};"
			"	begin",
			"		apex_util.set_workspace (",
			"					p_workspace => :l_workspace );",
			"",	
			"			apex_session.delete_session (p_session_id => l_session );",
			"	commit;",
			"	end;",
			"	/",
			"*/"
		   ],
		 "description": "Kill session/s in Oracle APEX"
	},		
	"APEX debug Pl/SQL": {
		"scope": "PL/SQL",
		"prefix": ["debug","attach","APEX"],
		 "body": [
			"declare",
    		"	l_workspace varchar2(30 char) := '${1:workspace}';"
    		"	l_app_id    number            := ${2:100};",
    		"	l_session_id number           := 0;",
			"begin",
    		"		apex_util.set_workspace (",
			"			p_workspace => l_workspace );",
			"",
    		"		apex_session.attach (",
        	"			p_app_id  => l_app_id,",
        	"			p_page_id => 1,",
        	"			p_session_id => l_session_id);",
			"",
			"	/* -- Full debug -- */",
    		"		apex_debug.enable(p_level=>apex_debug.c_log_level_engine_trace);",       
			"",
    		"	/* -- Classic --",
    		"		apex_debug.enable(p_level=>apex_debug.c_log_level_info);", 
    		"	*/",
			"",
    		"		apex_debug.enable_dbms_output(p_prefix=>'APEX Debug-');",
			"",
			"end;",
			"/",
			"",
			"",	
			"/* Add parameter to debugg script",
    		"	begin",
        	"		apex_util.set_session_state(p_name => 'P0_ID', p_value => 'TEST');",
			"	end;",
    		"	/",
			"*/"
			"",
			"",	
			"/* Debug messages",
			"	select * from apex_debug_messages;",
			"*/",    
			"",
			"/* Disable debug",
			"	begin",
			"		apex_debug.disable;",
			"		apex_session.detach;",
			"	end;",
			"	/",
			"*/"],
		 "description": "Debugging in PL/SQL Oracle APEX"
	},
	"APEX import app": {
		"scope": "PL/SQL",
		"prefix": ["import","app", "APEX"],
		 "body": [
			"declare",
			"	l_workspace varchar2(30 char) := '${1:workspace}';",
			"	l_app_id    number            := ${2:100};",
			"",
		   	"	l_workspace_id   number;"
			"begin",
			"	l_workspace_id := apex_util.find_security_group_id (l_workspace);",
		    "	apex_application_install.set_workspace_id (l_workspace_id);",
		    "	apex_application_install.set_application_id(l_app_id);",
		    "	apex_application_install.set_schema(l_workspace);",
			"end;",
			"/",
			"",
			"-- Run app install",
			"-- e.g @f100.sql",
		   ],
		 "description": "Install APEX app and change APEX APPLICATION ID for it"
	},	
	"APEX get version": {
		"scope": "PL/SQL",
		"prefix": ["version","APEX"],
		 "body": [
			"select *", 
			"from apex_release;",
			"",
		  	"select *",
			" from apex_patches;"
		   ],
		 "description": "Get Oracle APEX release and patch list"
	},
	"ORDS get version": {
		"scope": "PL/SQL",
		"prefix": ["version","ORDS"],
		 "body": [
			"select ords.installed_version from dual; "
		   ],
		 "description": "Get ORDS installed version"
	},	
	"APEX download file": {
		"scope": "PL/SQL",
		"prefix": ["download","APEX"],
		 "body": [
			"declare",
			"	l_blob blob;",
			"	l_filename varchar2(100 char);",
			"	l_mimetype varchar2(100 char);",
			"begin",
			"	select blob_content, mimetype, filename",
			"     into l_blob, l_mimetype, l_filename",
			"	  from my_image_table",
			"    where id = :FILE_ID;",
			"	--",
			"	sys.htp.init;",
			"	sys.owa_util.mime_header( l_mimetype, FALSE );",
			"	sys.htp.p('Content-length: ' || sys.dbms_lob.getlength( l_blob));",
			"	sys.htp.p('Content-Disposition: attachment; filename=\"' || l_filename || '\"' );",
			"	sys.owa_util.http_header_close;",
			"	sys.wpg_docload.download_file( l_blob );",
			"",
			"	apex_application.stop_apex_engine;",
			"",	
			"end;",
			"/"
		   ],
		 "description": "Download file with Oracle APEX"
	},
	"APEX split string": {
		"scope": "PL/SQL",
		"prefix": ["split","string","APEX"],
		 "body": [
			"declare",
			"	l_string          varchar2(4000) := 'P1_X:P1_Y';",
			"	l_page_items_arr  apex_t_varchar2;",
			"begin",
			"	l_page_items_arr := apex_string.split(p_str => l_string, p_sep => ':');",
			"	for i in 1..l_page_items_arr.count",
			"	loop",
			"		sys.dbms_output.put_line(l_page_items_arr(i)||':'||apex_util.get_session_state(l_page_items_arr(i)));",
			"	end loop;",
			"end;",
			"/"
		   ],
		 "description": "Split string values into array"
	},
	"APEX collection query": {
		"scope": "PL/SQL",
		"prefix": ["collection","APEX"],
		 "body": [
			"SELECT seq_id, c001, c002, c003, c004, c005, n001, d001, clob001",
			"  FROM APEX_collections",
		    " WHERE collection_name = '${1:collection_name}';"
		   ],
		 "description": "Select data from Oracle APEX collection defined by name"
	},
	"APEX export": {
		"scope": "PL/SQL",
		"prefix": ["export","app","APEX"],
		 "body": [
			"variable name varchar2(255)",
			"variable contents clob",
			"declare",
			"   l_files apex_t_export_files;",
			"begin",
			"   l_files := apex_export.get_application(p_application_id => ${1:100});",
			"   :name := l_files(1).name;",
			"   :contents := l_files(1).contents;",
			"end;",
			"/",
			"set feed off echo off head off flush off termout off trimspool on",
			"set long 100000000 longchunksize 32767",
			"col name new_val name",
			"select :name name from sys.dual;",
			"spool &name.",
			"print contents",
			"spool off",
			"",
			"/*",
			"FUNCTION GET_APPLICATION (",
			"	 p_application_id          IN NUMBER,",
			"	 p_split                   IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_date               IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_ir_public_reports  IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_ir_private_reports IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_ir_notifications   IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_translations       IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_pkg_app_mapping    IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_original_ids       IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_no_subscriptions   IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_comments           IN BOOLEAN             DEFAULT FALSE,",
			"	 p_with_supporting_objects IN VARCHAR2            DEFAULT NULL,",
			"	 p_with_acl_assignments    IN BOOLEAN             DEFAULT FALSE,", 
			"	 p_components              IN apex_t_varchar2     DEFAULT NULL )",
			"	 RETURN apex_t_export_files;",
			"/"
		   ],
		 "description": "Select data from Oracle APEX collection defined by name"
		},	
		"APEX JSON parse": {
			"scope": "PL/SQL",
			"prefix": ["json","parse","APEX"],
			 "body": [
				"declare",
				"	s varchar2(32767) := '{ \"a\": 1, \"b\": [\"hello\", \"world\"]}';",
				"begin",
				"	apex_json.parse(s);",
				"	sys.dbms_output.put_line('a is '||apex_json.get_varchar2(p_path => 'a'));",
				"end;",
				"/"
			   ],
			 "description": "Parse JSON"
		},
		"APEX create session": {
			"scope": "PL/SQL",
			"prefix": ["session","APEX"],
			 "body": [
				"apex_session.create_session(p_app_id => 100, p_page_id => 1, p_username => 'ANDREJGR');"
			   ],
			 "description": "Create Oracle APEX seession"
		},
		"APEX OCI mail settings": {
			"scope": "PL/SQL",
			"prefix": ["mail","OCI","internal","APEX"],
			 "body": [
				"begin"
				"	apex_instance_admin.set_parameter('SMTP_HOST_PORT', 587);",
				"	apex_instance_admin.set_parameter('SMTP_HOST_ADDRESS', 'smtp.email.uk-london-1.oci.oraclecloud.com');",
				"",
				"",
				"	apex_instance_admin.set_parameter('SMTP_USERNAME', '');",
				"	apex_instance_admin.set_parameter('SMTP_PASSWORD', '');",
				"	commit;",
				"end;",
				"/",
				"",
				"",
				"begin",
				"	apex_instance_admin.validate_email_config;",
				"end;",
				"/",
			   ],
			 "description": "Set and validate OCI APEX Mail settings"
		},	
		"APEX add Internal user": {
			"scope": "PL/SQL",
			"prefix": ["internal","user","unlock","APEX"],
			 "body": [
				"SELECT * FROM apex_workspace_apex_users; -- check users",
				"",
				"",
				"-- Add new user as sysdba",
				"begin",
				"",
				"	apex_util.set_workspace('INTERNAL');",
				"",   
				"	apex_util.create_user(",
				"		p_user_name                     => 'ADMIN_DBA',",
				"		p_email_address                 => 'admin@right-thing.solutions',",
				"		p_web_password                  => 'password',",
				"		p_developer_privs               => 'ADMIN:CREATE:DATA_LOADER:EDIT:HELP:MONITOR:SQL',",
				"		p_change_password_on_first_use  => 'N'",
				"		);",
				"   commit;",
				"end;",
				"/",
				"",
				"",
				"-- Unlock locked user",
				"begin",
				"",
				"	apex_util.set_workspace('INTERNAL');",
				"	apex_util.unlock_account(p_user_name => 'ADMIN_DBA');",
				"	commit;",
				"end;",
				"/"
			   ],
			 "description": "Add new Internal admin user or unlock it"
		},	
		"APEX list all CGI headers": {
			"scope": "PL/SQL",
			"prefix": ["CGI","header","APEX"],
			 "body": [
				"-- Run in APEX SQL Workshop or app",
				"begin",
				"	FOR i IN 1..owa.num_cgi_vars LOOP",
				"		htp.p(owa.cgi_var_name(i)||' : '||owa.cgi_var_val(i));",
				"	END LOOP;",
				"end;",
				"/"
			   ],
			 "description": "List all CGI headers with values"
		},
		"APEX OCI upgrade": {
			"scope": "PL/SQL",
			"prefix": ["version","upgrade","OCI","APEX"],
			 "body": [
				"select apex_instance_admin.get_parameter('UPGRADE_STATUS') as UPGRADE_STATUS from dual;",
				"",
				"/*",
				"UPGRADE_STATUS",
				"--------------",
				"AVAILABLE",
				"",
				"If an upgrade is available, you can initiate it during the upgrade window by running:",
				"*/",
				"begin",
				"	apex_instance_admin.set_parameter('UPGRADE_STATUS', 'RUN');",
			 	"end;",
			 	"/"
			   ],
			 "description": "Upgrade Oracle APEX on OCI instance"
		},		
		"APEX set workspace": {
			"scope": "PL/SQL",
			"prefix": ["set","workspace","APEX"],
			 "body": [
				"begin",
				"	apex_util.set_workspace (",
				"			p_workspace => :p_workspace );",
				"end;",
				"/",
			   ],
			 "description": "Set Oracle APEX workspace"
		},				
		"APEX context": {
			"scope": "PL/SQL",
			"prefix": ["context","APEX"],
			 "body": [
				"sys_context('APEX$SESSION','APP_USER')",
				"sys_context('APEX$SESSION','APP_SESSION')",
				"sys_context('APEX$SESSION','WORKSPACE_ID')",
			   ],
			 "description": "Display APEX contexts"
		},			
		"APEX add error": {
			"scope": "PL/SQL",
			"prefix": ["error","APEX"],
			 "body": [
				"apex_error.add_error (",
				"	p_message          => 'This custom account is not active!',",
				"	p_display_location => apex_error.c_inline_in_notification );"
			   ],
			 "description": "Add Oracle APEX error display"
		},	
}